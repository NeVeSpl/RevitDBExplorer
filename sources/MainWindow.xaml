<Window x:Class="RevitDBExplorer.MainWindow"
        x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:componentQueryVisualization="clr-namespace:RevitDBExplorer.UIComponents.QueryVisualization"
        xmlns:componentList="clr-namespace:RevitDBExplorer.UIComponents.List"
        xmlns:componentTree="clr-namespace:RevitDBExplorer.UIComponents.Tree"
        xmlns:converters="clr-namespace:RevitDBExplorer.WPF.Converters"       
        xmlns:controls="clr-namespace:RevitDBExplorer.WPF.Controls" 
        xmlns:ext="clr-namespace:RevitDBExplorer.WPF.MarkupExtensions"    
        xmlns:wpf="clr-namespace:RevitDBExplorer.WPF"
        mc:Ignorable="d"
        WindowStartupLocation="CenterOwner"
        Title="Revit database explorer and editor"
        MinHeight="383" Height="{ext:SettingBinding MainWindowHeight}"
        MinWidth="643" Width="{ext:SettingBinding MainWindowWidth}" 
        Icon="/RevitDBExplorer;component/Resources/RDBE.ico" 
        Closed="Window_Closed"
        KeyDown="Window_KeyDown" 
        SizeChanged="Window_SizeChanged"      
        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
        TextOptions.TextFormattingMode="Display"        
        >
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/Templates/All.xaml"/>
                <wpf:ThemeResourceDictionary Name="Colors"/>
                <ResourceDictionary Source="Resources/VectorGraphic.xaml"/>
            </ResourceDictionary.MergedDictionaries>           
            
            <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>   
            
        </ResourceDictionary>
    </Window.Resources>

    <Window.ContextMenu>
        <ContextMenu>
            <MenuItem Header="Theme" >
                <MenuItem Header ="Light - default" Tag="Default" Click="Window_MenuItemSelectTheme_Click"/>
                <MenuItem Header ="Dark - be ready" Tag="Dark" Click="Window_MenuItemSelectTheme_Click"/>
            </MenuItem>
            <MenuItem Header="Is event monitor enabled" IsCheckable="True" IsChecked="{ext:SettingBinding IsEventMonitorEnabled}" Checked="Window_MenuItemSnoopEvents_Checked"  Unchecked="Window_MenuItemSnoopEvents_Checked"/>
        </ContextMenu>
    </Window.ContextMenu>

    <Grid Margin="2" >
        <Grid.Resources>
            <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}" x:Key="ResetButton">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Padding" Value="2 1 1 1"/>
                <Setter Property="Margin" Value="2 0 0 0"/>
                <Setter Property="MinWidth" Value="22"></Setter>
                <Setter Property="MinHeight" Value="22"></Setter>
            </Style>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="{ext:SettingBinding FirstColumnWidth}" MinWidth="100" x:Name="cFirstColumnDefinition" />
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="*" MinWidth="100"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <UniformGrid Grid.ColumnSpan="3" Columns="13" Margin="0 0 0 2">
            <UniformGrid.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Padding" Value="3 3 3 4"/>
                    <Setter Property="Margin" Value="2 0 2 0"/>
                </Style>
            </UniformGrid.Resources>

            <Button Click="SelectorButton_Click" Tag="CurrentSelection" Margin="0 0 2 0" ToolTip="Snoop already selected elements in Revit; if none selected, snoop all elements from active view">
                <Path Style="{StaticResource IconSelection}"  />
            </Button>
            <Button Click="SelectorButton_Click" Tag="Db" ToolTip="Snoop DB" >
                <Path Style="{StaticResource IconDb}"  />
            </Button>
            <Button Click="SelectorButton_Click" Tag="ActiveView" ToolTip="Snoop active view">
                <Path Style="{StaticResource IconActiveView}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="ActiveDocument" ToolTip="Snoop active document">
                <Path Style="{StaticResource IconActiveDocument}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="Application" ToolTip="Snoop application">
                <Path Style="{StaticResource IconApplication}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="PickFace" ToolTip="Snoop by selecting face in Revit">
                <Path Style="{StaticResource IconPickFace}" />
            </Button>
            <Button Click="SelectorButton_Click" Tag="PickEdge" ToolTip="Snoop by selecting edge in Revit">
                <Path Style="{StaticResource IconPickEdge}"  />
            </Button>
            <Button Click="SelectorButton_Click" Tag="LinkedElement" ToolTip="Snoop by selecting linked element in Revit">
                <Path Style="{StaticResource IconLinkedElement}" />
            </Button>
            <!--<Button Click="SelectorButton_Click" Tag="DependentElements" ToolTip="Snoop dependent elements of already selected elements in Revit">
                <Path Style="{StaticResource IconDependentElements}" />
            </Button>-->
            <Button Click="SelectorButton_Click" Tag="Schemas" ToolTip="Snoop Extensible Storage framework schemas located in memory">
                <Path Style="{StaticResource IconSchemas}" />
            </Button>
            <Button Click="SelectorButton_Click"  Tag="FilterableCategories" ToolTip="Snoop categories that may be used in a ParameterFilterElement">
                <Path Style="{StaticResource IconCategories}" SnapsToDevicePixels="True" />
            </Button>
            <Button Click="ButtonWithSubMenu_Click"  ToolTip="Snoop Forge types">
                <Path Style="{StaticResource IconForge}" />
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="ParameterUtils.GetAllBuiltInGroups()" Click="SelectorButton_Click" Tag="ForgeParameterUtilsGetAllBuiltInGroups"/>
                        <MenuItem Header="ParameterUtils.GetAllBuiltInParameters()" Click="SelectorButton_Click" Tag="ForgeParameterUtilsGetAllBuiltInParameters"/>
                        <MenuItem Header="UnitUtils.GetAllMeasurableSpecs()" Click="SelectorButton_Click" Tag="ForgeUnitUtilsGetAllMeasurableSpecs"/>
                        <MenuItem Header="UnitUtils.GetAllUnits()" Click="SelectorButton_Click" Tag="ForgeUnitUtilsGetAllUnits"/>
                        <MenuItem Header="UnitUtils.GetAllDisciplines()" Click="SelectorButton_Click" Tag="ForgeUnitUtilsGetAllDisciplines"/>
                        <MenuItem Header="SpecUtils.GetAllSpecs()" Click="SelectorButton_Click" Tag="ForgeSpecUtilsGetAllSpecs"/>
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>
            <Button Click="SnoopEvents_Click"  ToolTip="Snoop events">
                <Path Style="{StaticResource IconEvent}" SnapsToDevicePixels="True" />
            </Button>
            <!--<Button Click="SelectorButton_Click" Tag="Updaters" >
                <Path Style="{StaticResource IconUpdater}" />
            </Button>-->
            <Button Click="ButtonWithSubMenu_Click" Margin="2 0 0 0" ToolTip="Snoop addins">
            <Path Style="{StaticResource IconAddin}" />
            <Button.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Snoop loaded external applications" Click="SelectorButton_Click" Tag="LoadedApplications" ToolTip="UIApplication.LoadedApplications"/>
                    <MenuItem Header="Snoop updaters applicable to the given document" Icon="" Click="SelectorButton_Click" Tag="Updaters" ToolTip="UpdaterRegistry.GetRegisteredUpdaterInfos()"/>                              
                </ContextMenu>
            </Button.ContextMenu>
            </Button>
        </UniformGrid>

        <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="0 3 0 3" >
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>
                <controls:TextBoxWithPlaceholder Text="{Binding DatabaseQuery, Mode=TwoWay, Delay=1000, UpdateSourceTrigger=PropertyChanged}" Placeholder="Query Revit database" ToolTip="{Binding DatabaseQueryToolTip}" ToolTipService.ShowDuration="50000">
                    <controls:TextBoxWithPlaceholder.ContextMenu>
                        <ContextMenu>                       
                            <MenuItem Command="ApplicationCommands.Copy" />
                            <MenuItem Command="ApplicationCommands.Cut" />
                            <MenuItem Command="ApplicationCommands.Paste" />
                            <Separator/>
                            <MenuItem Header ="Copy generated FilteredElementCollector syntax" Tag="Default" Click="TextBox_MenuItem_CopyFilteredElementCollector"/>
                        </ContextMenu>
                    </controls:TextBoxWithPlaceholder.ContextMenu>
                </controls:TextBoxWithPlaceholder>
                <Button Grid.Column="1" Style="{DynamicResource ResetButton}" ToolTip="Reset query of Revit database" Background="Transparent"  Click="ResetDatabaseFilter_Click">
                    <Path Style="{StaticResource IconClose}" Width="18" />
                </Button>
            </Grid>
            <componentQueryVisualization:QueryVisualizationView  Grid.Row="1" Margin="0 1 0 0" DataContext="{Binding QueryVisualization}"/>
        </Grid>

        <Grid Grid.Row="2" Grid.Column="0" Margin="0 0 0 3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            <controls:TextBoxWithPlaceholder Grid.Column="0" Margin="0 0 2 1" Text="{Binding TreeItemsFilterPhrase, Mode=TwoWay, Delay=500, UpdateSourceTrigger=PropertyChanged}" Placeholder="Filter tree by item name"/>
            <Button Grid.Column="1" Style="{DynamicResource ResetButton}"  ToolTip="Reset filter of item name" Background="Transparent"  Click="ResetTreeItemsFilter_Click">
                <Path Style="{StaticResource IconClose}" Width="18" />
            </Button>
        </Grid>

        <Grid Grid.Row="2" Grid.Column="2" Margin="0 0 0 3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>

            <controls:TextBoxWithPlaceholder Margin="0 0 2 0" Text="{Binding ListItemsFilterPhrase, Mode=TwoWay, Delay=200, UpdateSourceTrigger=PropertyChanged}" Placeholder="Filter list by property/method name"/>

            <Button Grid.Column="1" Style="{DynamicResource ResetButton}"  ToolTip="Reset filter of property/method name" Background="Transparent"  Click="ResetListItemsFilter_Click">
                <Path Style="{StaticResource IconClose}" Width="18" />
            </Button>
            <Button Grid.Column="2" Margin="2 0 0 0" MinWidth="22" MinHeight="22" Padding="1 1 1 1" ToolTip="Reload data from Revit in the list" Background="Transparent"  Click="ReloadButton_Click">
                <Path Style="{StaticResource IconReload}" Width="18" />
            </Button>
        </Grid>


        <TreeView Grid.Row="3" Grid.Column="0" ItemsSource="{Binding TreeItems}" Margin="0 2 2 0" BorderThickness="0"  SelectedItemChanged="TreeView_SelectedItemChanged" VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling" SizeChanged="Window_SizeChanged" x:Name="cTreeSecretName">
            <TreeView.Resources>
                <converters:ToResourceWithKeyConverter x:Key="ToResourceWithKeyConverter" FrameworkElement="{Binding ElementName=cTreeSecretName}" />
                
                <HierarchicalDataTemplate DataType="{x:Type componentTree:GroupTreeVM}" ItemsSource="{Binding Items}">
                    <StackPanel Orientation="Horizontal">
                        <StackPanel.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Select in Revit" Command="{Binding SelectInRevit}" CommandParameter="{Binding}"/>
                            </ContextMenu>
                        </StackPanel.ContextMenu>
                        <StackPanel.Resources>
                            <Style TargetType="{x:Type TextBlock}" x:Key="postfix">
                                <Style.Triggers>
                                    <MultiDataTrigger >
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Path=IsSelected}" Value="False" />                                           
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Foreground" Value="{DynamicResource TreeView.Category.Postfix}"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                            <Style TargetType="{x:Type StackPanel}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Count}" Value="0">
                                        <Setter Property="Opacity" Value="0.4"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Resources>
                        <TextBlock Text="{Binding Name, Mode=OneWay}" />
                        <TextBlock Text="[" Margin="0 -1 0 0" Style="{StaticResource postfix}"/>
                        <TextBlock Text="{Binding Count, Mode=OneWay}"  Style="{StaticResource postfix}"/>
                        <TextBlock Text="]" Margin="0 -1 0 0" Style="{StaticResource postfix}"/>                        
                    </StackPanel>                                  
                </HierarchicalDataTemplate>

                <HierarchicalDataTemplate DataType="{x:Type componentTree:SnoopableObjectTreeVM}" ItemsSource="{Binding Items}">
                    <StackPanel Orientation="Horizontal">
                        <StackPanel.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Select in Revit" Command="{Binding SelectInRevit}" CommandParameter="{Binding}"/>
                                <MenuItem Header="Show in Revit" Command="{Binding ShowInRevit}" CommandParameter="{Binding}"/>
                                <MenuItem Header="Isolate in Revit" Command="{Binding IsolateInRevit}" CommandParameter="{Binding}"/>
                                <MenuItem Header="Draw in Revit (using model lines)" Command="{Binding DrawInRevit}" CommandParameter="{Binding}"/>
                                <MenuItem Header="Snoop in a new window" Command="{Binding SnoopInNewWindow}" CommandParameter="{Binding}" />                               
                            </ContextMenu>
                        </StackPanel.ContextMenu>

                        <Path Style="{Binding Object.NamePrefixIcon, Converter={StaticResource ToResourceWithKeyConverter}, ConverterParameter=Icon}" Margin="0 1 4 0" Fill="{Binding ElementName=cTextBlock, Path=Foreground}"  />
                        <TextBlock x:Name="cTextBlock">             
                             <Run Text="{Binding Prefix, Mode=OneWay}">
                                 <Run.Style>
                                     <Style TargetType="{x:Type Run}">
                                        <Style.Triggers>
                                            <MultiDataTrigger >
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Path=IsSelected}" Value="False" />                                                
                                                </MultiDataTrigger.Conditions>                                               
                                                <Setter Property="Foreground" Value="{DynamicResource TreeView.Object.Prefix}"/>
                                            </MultiDataTrigger>                                        
                                        </Style.Triggers>
                                     </Style>
                                 </Run.Style>
                              </Run>
                            <Run Text="{Binding Object.Name, Mode=OneWay}" />
                        </TextBlock>
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.Resources>

            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">                    
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                    <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
                    <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled, Mode=TwoWay}"/>
                    <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}" />
                    <Setter Property="Padding" Value="2 1 2 1"/>
                    <Setter Property="Margin" Value="-3 0 0 0"/>

                    <Style.Resources>
                        <Style TargetType="Border">
                            <Setter Property="CornerRadius" Value="2" />
                            <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItem.BorderBrush}" />
                            <Setter Property="BorderThickness" Value="1" />
                            
                        </Style>
                        <!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Yellow"/>-->
                    </Style.Resources>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItem.BorderBrush.IsSelected}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource TreeViewItem.InactiveSelectionHighlightTextBrushKey}"/>
                            <Setter Property="Border.Background" Value="red"/>
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>
        </TreeView>

        <GridSplitter Grid.Row="3" Grid.Column="1" Background="{DynamicResource GridSplitter.Background}"  Width="2" Margin="0 2 2 0" HorizontalAlignment="Left" VerticalAlignment="Stretch" />

        <componentList:ListView Grid.Row="3" Grid.Column="3" Margin="-2 2 0 0" DataContext="{Binding List}"  />        

        <Grid Grid.Row="3" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="150" Height="35" Margin="0 0 0 0" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" Opacity="0.90"  IsHitTestVisible="False"  Visibility="{Binding IsRevitBusy, Converter={StaticResource BoolToVisibilityConverter}}" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="10"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            
            <Path Grid.Column="1" Style="{StaticResource BusyIndicator}" RenderTransformOrigin="0.5,0.5" >
                <Path.RenderTransform>
                    <RotateTransform x:Name="MyAnimatedTransform" Angle="0" />                    
                </Path.RenderTransform>
                <Path.Triggers>
                    <EventTrigger RoutedEvent="Loaded">                       
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"  To="-360" Duration="0:0:5" RepeatBehavior="Forever" />
                            </Storyboard>
                        </BeginStoryboard>                            
                    </EventTrigger>
                </Path.Triggers>
            </Path>
            <TextBlock Grid.Column="2" Text="Revit is busy!" FontSize="18" Margin="8 4 0 0" RenderTransformOrigin="0.5,0.5" Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>       
            
        </Grid>
    </Grid>
</Window>